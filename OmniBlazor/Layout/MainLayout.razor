@using Blazored.LocalStorage
@using OmniBlazor.Services
@using System.Net.Http.Headers
@inherits LayoutComponentBase
@inject IAccountService _AccountService
@inject ILocalStorageService _localStorageService
@inject NavigationManager NavigationManager
<LogingFrom @bind-IsVisible="@openLogingModal" />
<RegisterForm @bind-IsVisible="@openRegisterModal"/>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <Dropdown>
                    <DropdownToggle Outline="true">
                        <i class="fa fa-user nav-menu" aria-hidden="true"></i>
                    </DropdownToggle>
                <DropdownMenu>
                        <AuthorizeView Roles="Omni">
                        <Authorized>
                            <DropdownItem style="margin: auto; display:flex; justify-content:center; align-items: center;" @onclick="Logout">Logout</DropdownItem>                    
                        </Authorized>
                        <NotAuthorized>
                            <DropdownItem style="margin: auto; display:flex; justify-content:center; align-items: center;" @onclick="OpenRegisterModal">Register</DropdownItem>
                            <DropdownDivider/>
                            <DropdownItem style="margin: auto; display:flex; justify-content:center; align-items: center;" @onclick="OpenLogingModal">Login</DropdownItem>                    
                        </NotAuthorized>
                        </AuthorizeView>
                </DropdownMenu>
            </Dropdown>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code{
    private bool openLogingModal = false;
    private bool openRegisterModal = false;

    private LogoutDto logoutDto = new LogoutDto();
    private Task OpenLogingModal()
    {
        openLogingModal = true;

        return Task.CompletedTask;
    }

    private Task OpenRegisterModal()
    {
        openRegisterModal = true;

        return Task.CompletedTask;
    }

    private async Task Logout(){
        var token = await _localStorageService.GetItemAsStringAsync("authToken");
        logoutDto.token = token;
        if(token != null)
        {
            try{

                var response = await _AccountService.Lougout(logoutDto);
                @* await _localStorageService.RemoveItemAsync("authToken"); *@

                NavigationManager.NavigateTo("/", true);

            }catch(Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

    }

}

<style>
</style>